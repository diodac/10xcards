import type { Tables, TablesInsert, TablesUpdate, Json } from "./db/database.types";

// --- Enums ---

/**
 * Represents the source of a flashcard.
 * - 'manual': Created manually by the user.
 * - 'ai-full': Generated by AI and saved without user edits.
 * - 'ai-edited': Generated by AI and subsequently edited by the user.
 */
export enum FlashcardSourceEnum {
  MANUAL = "manual",
  AI_FULL = "ai-full",
  AI_EDITED = "ai-edited",
}

// --- User Profile ---

/**
 * DTO for user profile data.
 * Maps database 'user_id' to 'id' for API consistency.
 */
export interface UserProfileDto {
  id: Tables<"user_profiles">["user_id"];
  created_at: Tables<"user_profiles">["created_at"];
  updated_at: Tables<"user_profiles">["updated_at"];
  // preferences?: Json; // Example for future extension, uncomment if 'preferences' is added
}

/**
 * Command model for updating a user profile.
 * The API plan suggests 'preferences' as an example updatable field.
 * Currently, 'user_profiles' table in DB has no other specific updatable fields beyond what's auto-managed.
 */
export interface UpdateUserProfileCommand {
  preferences?: Json; // Using Json type from database.types.ts
}

// --- Decks ---

/**
 * DTO for a deck. Directly maps to the 'decks' table row structure.
 */
export type DeckDto = Tables<"decks">;

/**
 * Command model for creating a new deck.
 * Requires 'name'. 'user_id' and 'id' are handled by the backend.
 */
export type CreateDeckCommand = Pick<TablesInsert<"decks">, "name">;

/**
 * Command model for updating an existing deck.
 * Requires 'name'.
 */
export interface UpdateDeckCommand {
  name: Tables<"decks">["name"]; // Ensures type consistency for 'name'
}

// --- Flashcards ---

/**
 * DTO for a flashcard.
 * Based on the 'flashcards' table row, but 'source' is typed as FlashcardSourceEnum
 * for stricter type checking, assuming the string in DB conforms to this enum.
 */
export type FlashcardDto = Omit<Tables<"flashcards">, "source"> & {
  source: FlashcardSourceEnum;
};

/**
 * Command model for creating a new flashcard.
 * Requires 'front', 'back', and 'source' (as FlashcardSourceEnum).
 * 'deck_id' and 'id' are handled by the backend.
 */
export interface CreateFlashcardCommand {
  front: TablesInsert<"flashcards">["front"];
  back: TablesInsert<"flashcards">["back"];
  source: FlashcardSourceEnum;
}

/**
 * Command model for updating an existing flashcard.
 * All fields ('front', 'back', 'source') are optional.
 * 'source' uses FlashcardSourceEnum.
 */
export interface UpdateFlashcardCommand {
  front?: TablesUpdate<"flashcards">["front"];
  back?: TablesUpdate<"flashcards">["back"];
  source?: FlashcardSourceEnum;
}

// --- AI Flashcard Generation ---

/**
 * Command model for generating flashcards using AI.
 * Requires 'text' input.
 */
export interface GenerateFlashcardsCommand {
  text: string;
}

/**
 * DTO for a single flashcard suggestion from AI.
 * Contains 'front' and 'back' content, derived from flashcard entity types for consistency.
 */
export type FlashcardSuggestionDto = Pick<Tables<"flashcards">, "front" | "back">;

/**
 * DTO for the response of AI flashcard generation.
 * Contains a list of flashcard suggestions.
 */
export interface GenerateFlashcardsResponseDto {
  suggestions: FlashcardSuggestionDto[];
}

// --- Paginated Responses & Study ---

/**
 * DTO for pagination metadata accompanying list responses.
 */
export interface PaginationDto {
  page: number;
  page_size: number;
  total_items: number;
  total_pages: number;
}

/**
 * DTO for the response when listing decks.
 * Includes an array of DeckDto and pagination information.
 */
export interface ListDecksResponseDto {
  data: DeckDto[];
  pagination: PaginationDto;
}

/**
 * DTO for the response when listing flashcards in a deck.
 * Includes an array of FlashcardDto and pagination information.
 */
export interface ListFlashcardsResponseDto {
  data: FlashcardDto[];
  pagination: PaginationDto;
}

/**
 * DTO for the response when retrieving flashcards for a study session.
 * Contains an array of FlashcardDto.
 */
export interface StudyFlashcardsResponseDto {
  data: FlashcardDto[];
}
