---
import "../styles/global.css";
import { createSupabaseServerInstance } from "@/db/supabase.client";

interface Props {
  title?: string;
}

const { title = "10x Astro Starter" } = Astro.props;

let isLoggedIn = false;
let userEmail: string | undefined = undefined; // Variable to store user email
const currentPath = Astro.url.pathname;
const appName = "10xCards";

// Check for session only if cookies are available (server context)
// and not on auth-related pages to avoid issues.
if (Astro.cookies && typeof Astro.cookies.get === 'function' && !['/login', '/register', '/auth/callback'].includes(currentPath)) {
  try {
    // Assuming Astro.request.headers is available and needed by createSupabaseServerInstance
    // If createSupabaseServerInstance only needs cookies, headers can be omitted or passed as undefined
    const requestHeaders = Astro.request ? Astro.request.headers : new Headers();
    const supabase = createSupabaseServerInstance({
      cookies: Astro.cookies,
      headers: requestHeaders,
    });
    const { data: { user }, error: getUserError } = await supabase.auth.getUser();

    if (getUserError) {
      console.error("Error fetching user in Layout.astro:", getUserError.message);
      // Potentially handle this error, e.g., by setting isLoggedIn = false or redirecting
    } else if (user) {
      isLoggedIn = true;
      userEmail = user.email;
    } else {
      // No user and no error, means user is not logged in
      isLoggedIn = false;
    }
  } catch (error) {
    console.error("Error in authentication check in Layout.astro:", error);
    // isLoggedIn remains false, userEmail remains undefined
  }
}

const showTopbar = isLoggedIn && !['/login', '/register'].includes(currentPath);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    {showTopbar && (
      <header class="bg-indigo-700 text-white p-4 flex justify-between items-center shadow-md">
        <div class="text-xl font-semibold">{appName}</div>
        <nav class="flex items-center gap-4">
          {userEmail && <div class="text-sm">{userEmail}</div>}
          <button id="logout-button" class="bg-pink-600 hover:bg-pink-700 text-white font-medium py-2 px-4 rounded transition-colors duration-150">
            Wyloguj
          </button>
        </nav>
      </header>
    )}
    <main>
      <slot />
    </main>
    {showTopbar && (
      <script is:inline>
        const logoutButton = document.getElementById('logout-button');
        if (logoutButton) {
          logoutButton.addEventListener('click', async () => {
            try {
              const response = await fetch('/api/auth/logout', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
              });
              if (response.ok) {
                window.location.href = '/login?message=logged_out';
              } else {
                const data = await response.json().catch(() => ({})) ; // Graceful JSON parsing
                console.error('Logout failed:', data.error || response.statusText || 'Unknown error');
                alert('Wystąpił błąd podczas wylogowywania: ' + (data.error || 'Spróbuj ponownie.'));
              }
            } catch (error) {
              console.error('Error during logout request:', error);
              alert('Wystąpił błąd sieci podczas wylogowywania. Sprawdź połączenie i spróbuj ponownie.');
            }
          });
        }
      </script>
    )}
  </body>
</html>

<style>
  html {
    height: 100%;
  }
  body {
    margin: 0;
    width: 100%;
    min-height: 100vh; /* Ensure body takes at least full viewport height */
    display: flex;
    flex-direction: column;
    /* background-color: #f0f2f5; Example global background, if not set in global.css */
  }
  main {
    flex-grow: 1; /* Allows main content to expand and fill available space */
  }
</style>
